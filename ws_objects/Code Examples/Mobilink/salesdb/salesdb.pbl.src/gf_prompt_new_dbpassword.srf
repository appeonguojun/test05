$PBExportHeader$gf_prompt_new_dbpassword.srf
global type gf_prompt_new_dbpassword from function_object
end type

forward prototypes
global function long gf_prompt_new_dbpassword (transaction a_trans, mlsync a_uosync, ref string a_errortext)
end prototypes

global function long gf_prompt_new_dbpassword (transaction a_trans, mlsync a_uosync, ref string a_errortext);
//-------------------------------------------------------------------------------------------------------------------------------------------
//  Function to prompt user for new Database password using w_prompt_new_dbpassword
//   window from the Smart Client Toolkit.  Also makes use of the s_new_password structure
//   from the  Smart Client Toolkit.
//   Sample "Change Database Password..." menuitem script to invoke this function
//   MLSync		l_uosync
//   long		rc
//   string		errtext
//   l_uosync = CREATE nvo_salesdb_mlsync
// 	rc = gf_prompt_new_dbpassword(sqlca, l_uosync, errtext)
//	messagebox("Change DB Password", errtext)
//   destroy l_uosync
//
//  Return codes:  1=Success   -1=Failure  100=Cancel
//-------------------------------------------------------------------------------------------------------------------------------------------
long		rc
SyncParm	parms
s_new_password	newpass_args
string		s_sql

rc = -1
a_errortext = ""
if IsValid(a_uosync) then
	//  If using the SyncSettings table from the Smart Client Toolkit, then uncomment this section to retrieve
	//  the current settings for dbuser and dbpass.   These are used to initialize the w_prompt_new_dbpassword window.
	if IsValid(a_trans) then
		if (gf_get_syncsettings_from_db(a_trans, a_uosync.syncregistrykey, parms) = 0) then
			a_uosync.SetParm(parms)
		else
			a_errortext += a_trans.sqlerrtext + '~r~n'
		end if
	else
		a_errortext += "Invalid transaction object. " + '~r~n'
		return rc
	end if
	newpass_args.uosync = a_uosync
	newpass_args.errortext = a_errortext
	OpenWithParm(w_prompt_new_dbpassword,  newpass_args)
	newpass_args = Message.PowerObjectParm
	a_errortext = newpass_args.errortext
	if newpass_args.rc = 1 then
		s_sql = "grant connect to ~"" + a_uosync.dbuser + &
			"~" identified by ~"" + newpass_args.newpassword + "~""
		EXECUTE IMMEDIATE :s_sql USING a_trans;
		if a_trans.sqlcode = 0 then
			a_errortext += 'New Database password accepted.' + '~r~n'
			parms.dbpass = newpass_args.newpassword
			rc = 1
			//  If using the SyncSettings table from the Smart Client Toolkit, then save the new Database password
			//  in the database for the next synchronization request.
			if IsValid(a_trans) then
				gf_save_syncsettings(a_trans, a_uosync.syncregistrykey, parms)
				if a_trans.sqlcode <> 0 then
					a_errortext += 'Error saving new Database password in SyncSettings table.  ' + a_trans.sqlerrtext + '~r~n'
					rc = -1
				end if
			end if
		else
			a_errortext += 'Error setting new password.  ' + a_trans.sqlerrtext + '~r~n'
		end if
	else
		rc = 100
	end if
else
	a_errortext += "Invalid MLSync object." + '~r~n'
end if
return rc
end function

